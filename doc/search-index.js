var searchIndex = {};
searchIndex['git2'] = {"items":[[0,"","git2","The git2 crate"],[0,"git2","","The git2 module"],[1,"CapabilityFlags","git2::git2",""],[1,"Version","",""],[3,"capabilities","",""],[3,"version","","Returns the version of your libgit2 library"],[3,"version_check","","Checks to make sure your version of libgit2 is appropriate"],[0,"error","",""],[1,"GitError","git2::git2::error",""],[11,"message","","",0],[11,"class","","",0],[2,"GitErrorType","","Types of errors"],[12,"GITERR_NONE","","",1],[12,"GITERR_NOMEMORY","","",1],[12,"GITERR_OS","","",1],[12,"GITERR_INVALID","","",1],[12,"GITERR_REFERENCE","","",1],[12,"GITERR_ZLIB","","",1],[12,"GITERR_REPOSITORY","","",1],[12,"GITERR_CONFIG","","",1],[12,"GITERR_REGEX","","",1],[12,"GITERR_ODB","","",1],[12,"GITERR_INDEX","","",1],[12,"GITERR_OBJECT","","",1],[12,"GITERR_NET","","",1],[12,"GITERR_TAG","","",1],[12,"GITERR_TREE","","",1],[12,"GITERR_INDEXER","","",1],[12,"GITERR_SSL","","",1],[12,"GITERR_SUBMODULE","","",1],[12,"GITERR_THREAD","","",1],[12,"GITERR_STASH","","",1],[12,"GITERR_CHECKOUT","","",1],[12,"GITERR_FETCHHEAD","","",1],[12,"GITERR_MERGE","","",1],[3,"get_last_error","","Returns the last error"],[10,"fmt","","",1],[10,"fmt","","",0],[0,"repository","git2::git2",""],[1,"Repository","git2::git2::repository",""],[0,"opaque","",""],[2,"Repo","git2::git2::repository::opaque",""],[10,"clone","git2::git2::repository","",2],[10,"_new","","Not actually a public interface",2],[10,"_get_ptr","","Not actually a public interface",2],[10,"init","","Creates a new Git repository in the given folder.",2],[10,"open","","Open a git repository.",2],[10,"open_bare","","Open a bare repository on the serverside.",2],[10,"is_bare","","Check if a repository is bare",2],[10,"is_empty","","Check if a repository is empty",2],[10,"is_shallow","","Determine if the repository was a shallow clone",2],[10,"path","","Get the path of this repository",2],[10,"config","","Get the configuration file for this repository.",2],[10,"lookup_reference","","",2],[10,"lookup_object","","",2],[10,"lookup_blob","","",2],[10,"lookup_commit","","",2],[10,"lookup_branch","","",2],[10,"branch_iterator","","",2],[10,"fmt","","",2],[0,"reference","git2::git2",""],[1,"Reference","git2::git2::reference",""],[2,"GitRefType","",""],[12,"GIT_REF_INVALID","","",3],[12,"GIT_REF_OID","","",3],[12,"GIT_REF_SYMBOLIC","","",3],[12,"GIT_REF_LISTALL","","",3],[0,"opaque","",""],[2,"Reference","git2::git2::reference::opaque",""],[10,"clone","git2::git2::reference","",4],[10,"eq","","",3],[10,"ne","","",3],[10,"_new","","Not really public",4],[10,"lookup","","Lookup a reference by name in a repository.",4],[10,"is_branch","","Check if a reference is a local branch.",4],[10,"is_remote","","Check if a reference is a remote tracking branch",4],[10,"get_type","","Get the type of a reference.",4],[10,"name","","Get the full name of a reference.",4],[10,"target","","Get the OID pointed to by a direct reference.",4],[10,"to_oid","","Converts this reference to an OID by calling `.target()`",4],[0,"oid","git2::git2",""],[1,"GitOid","git2::git2::oid",""],[1,"OID","",""],[5,"GIT_OID_RAWSZ","","Size (in bytes) of a raw/binary oid"],[5,"GIT_OID_HEXSZ","","Size (in bytes) of a hex formattted oid"],[6,"ToOID","","A trait for anything that can be converted into an OID"],[9,"to_oid","","",5],[10,"_new","","",6],[10,"_get_ptr","","",6],[10,"to_string","","Format a OID as a hex-formatted String",6],[10,"fmt","","",6],[10,"eq","","",6],[10,"to_oid","","",6],[0,"object","git2::git2",""],[1,"Object","git2::git2::object",""],[2,"GitObjectType","",""],[12,"GIT_OBJ_ANY","","Object can be any of the following",7],[12,"GIT_OBJ_BAD","","Object is invalid",7],[12,"GIT_OBJ__EXT1","","Reserved for future use.",7],[12,"GIT_OBJ_COMMIT","","A commit object",7],[12,"GIT_OBJ_TREE","","A tree (directory listing) object",7],[12,"GIT_OBJ_BLOB","","A file revision object",7],[12,"GIT_OBJ_TAG","","An annotated tag object",7],[12,"GIT_OBJ__EXT2","","Reserved for future use",7],[12,"GIT_OBJ_OFS_DELTA","","A delta, base is given by an offset",7],[12,"GIT_OBJ_REF_DELTA","","A delta, base is given by object id",7],[0,"opaque","",""],[2,"Object","git2::git2::object::opaque",""],[10,"from_i64","git2::git2::object","",7],[10,"from_u64","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"clone","","",8],[10,"lookup","","Lookup a reference to one of the objects in a repository.",8],[10,"_get_ptr","","",8],[10,"get_type","","Get the object type of an object",8],[0,"blob","git2::git2",""],[1,"Blob","git2::git2::blob",""],[0,"opaque","",""],[2,"Blob","git2::git2::blob::opaque",""],[4,"GitOff","git2::git2::blob",""],[10,"clone","","",9],[10,"lookup","","Lookup a blob object from a repository.",9],[10,"_get_ptr","","",9],[10,"_get_const_ptr","","",9],[10,"rawsize","","Get the size in bytes of the contents of a blob",9],[10,"rawcontent","","Get a buffer with the raw content of a blob.",9],[10,"id","","Get the id of a blob.",9],[10,"is_binary","","Determine if the blob content is most certainly binary or not.",9],[10,"owner","","Get the repository that contains the blob.",9],[0,"commit","git2::git2",""],[1,"GitTime","git2::git2::commit","Time in a signature"],[1,"Signature","","An action signature (e.g. for committers, taggers, etc)"],[11,"name","","",10],[11,"email","","",10],[11,"when","","",10],[1,"Commit","",""],[0,"opaque","",""],[2,"Commit","git2::git2::commit::opaque",""],[10,"fmt","git2::git2::commit","",11],[10,"fmt","","",10],[10,"clone","","",12],[10,"lookup","","Lookup a commit object from a repository.",12],[10,"_get_ptr","","",12],[10,"message","","Get the full message of a commit.",12],[10,"message_encoding","","Get the encoding for the message of a commit, as a string representing a standard encoding\nname.",12],[10,"parentcount","","Get the number of parents of this commit",12],[10,"parent","","Get the parent commit",12],[10,"id","","Get the id of a commit",12],[10,"time_offset","","Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.",12],[10,"time","","Get the commit time (i.e. committer time) of a commit.",12],[10,"author","","Get the author of a commit.",12],[10,"committer","","Get the committer of a commit.",12],[0,"config","git2::git2",""],[1,"GitConfigEntry","git2::git2::config",""],[11,"name","","",13],[11,"value","","",13],[11,"level","","",13],[1,"GitConfigIterator","",""],[1,"Config","",""],[2,"GitConfigLevel","",""],[12,"GIT_CONFIG_LEVEL_SYSTEM","","",14],[12,"GIT_CONFIG_LEVEL_XDG","","",14],[12,"GIT_CONFIG_LEVEL_GLOBAL","","",14],[12,"GIT_CONFIG_LEVEL_LOCAL","","",14],[12,"GIT_CONFIG_LEVEL_APP","","",14],[12,"GIT_CONFIG_HIGHEST_LEVEL","","",14],[0,"opaque","",""],[2,"Config","git2::git2::config::opaque",""],[2,"ConfigIterator","",""],[10,"fmt","git2::git2::config","",14],[10,"fmt","","",13],[10,"clone","","",15],[10,"_get_ptr","","",15],[10,"_new","","",15],[10,"get_bool","","Get the value of a boolean config variable.",15],[10,"get_string","","Get the value of a string config variable.",15],[10,"get_entry","","Get the git_config_entry of a config variable.",15],[10,"iterator","","Iterate over all the config variables",15],[10,"next","","",16],[10,"drop","","",16],[0,"clone","git2::git2",""],[1,"GitCloneOptions","git2::git2::clone",""],[3,"clone","","Clone a remote repository."],[0,"branch","git2::git2",""],[1,"GitBranchIterator","git2::git2::branch","An iterator over the branches in the repository (local or remote)"],[2,"GitBranchType","",""],[12,"GIT_BRANCH_LOCAL","","",17],[12,"GIT_BRANCH_REMOTE","","",17],[12,"GIT_BRANCH_LOCALREMOTE","","A logical OR of GIT_BRANCH_LOCLA and GIT_BRANCH_REMOTE, usful in `branch::iterator`",17],[3,"lookup","","Lookup a branch by its name in a repository."],[3,"iterator","","Get an iterator over all the branches in this repository"],[0,"opaque","",""],[2,"BranchIterator","git2::git2::branch::opaque",""],[10,"next","git2::git2::branch","",18],[10,"drop","","",18],[5,"GIT_CAP_THREADS","git2::git2",""],[5,"GIT_CAP_HTTPS","",""],[5,"GIT_CAP_SSH","",""],[10,"hash","","",19],[10,"cmp","","",19],[10,"partial_cmp","","",19],[10,"lt","","",19],[10,"le","","",19],[10,"gt","","",19],[10,"ge","","",19],[10,"clone","","",19],[10,"eq","","",19],[10,"ne","","",19],[10,"empty","","Returns an empty set of flags.",19],[10,"all","","Returns the set containing all flags.",19],[10,"bits","","Returns the raw value of the flags currently stored.",19],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",19],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",19],[10,"is_empty","","Returns `true` if no flags are currently stored.",19],[10,"is_all","","Returns `true` if all flags are currently set.",19],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19],[10,"insert","","Inserts the specified flags in-place.",19],[10,"remove","","Removes the specified flags in-place.",19],[10,"bitor","","Returns the union of the two sets of flags.",19],[10,"bitand","","Returns the intersection between the two sets of flags.",19],[10,"sub","","Returns the set difference of the two sets of flags.",19],[10,"not","","Returns the complement of this set of flags.",19],[10,"fmt","","",20]],"paths":[[1,"GitError"],[2,"GitErrorType"],[1,"Repository"],[2,"GitRefType"],[1,"Reference"],[6,"ToOID"],[1,"OID"],[2,"GitObjectType"],[1,"Object"],[1,"Blob"],[1,"Signature"],[1,"GitTime"],[1,"Commit"],[1,"GitConfigEntry"],[2,"GitConfigLevel"],[1,"Config"],[1,"GitConfigIterator"],[2,"GitBranchType"],[1,"GitBranchIterator"],[1,"CapabilityFlags"],[1,"Version"]]};
initSearch(searchIndex);
